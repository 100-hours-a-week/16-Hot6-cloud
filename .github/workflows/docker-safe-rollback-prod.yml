name: Rollback Docker Prod (Safe)

on:
  workflow_dispatch:
    inputs:
      be_version:
        description: 'ÌòÑÏû¨ ÏûòÎ™ª Î∞∞Ìè¨Îêú docker Î∞∞Ìè¨ Î≤ÑÏ†Ñ (Ïòà: 1.2.3)'
        required: true
      fe_slot:
        description: 'ÌòÑÏû¨ ÏûòÎ™ª Î∞∞Ìè¨Îêú FE Ïä¨Î°Ø (Ïòà: blue, green)'
        required: true

jobs:
  rollback:
    runs-on: ubuntu-latest
    env:
      REGION: asia-northeast3
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      AWS_DEFAULT_REGION: ap-northeast-2

    steps:
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.CLOUDFRONT_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CLOUDFRONT_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Set variables
        id: vars
        run: |
          REGION="${{ env.REGION }}"
      
          MIG_NAME="onthetop-mig-prod"
      
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "mig_name=$MIG_NAME" >> $GITHUB_OUTPUT


      - name: Get list of backend instance IPs
        id: get_ips
        run: |

          MIG="${{ steps.vars.outputs.mig_name }}"
          REGION="${{ steps.vars.outputs.region }}"
          INSTANCE_NAMES=$(gcloud compute instance-groups managed list-instances "$MIG" \
            --region="$REGION" \
            --format="get(instance)" | sed -n 's|.*/||p')
          
          if [ -z "$INSTANCE_NAMES" ]; then
            echo "‚ùå MIG Ïù∏Ïä§ÌÑ¥Ïä§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. MIG Ïù¥Î¶ÑÍ≥º REGIONÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî."
            exit 1
          fi


          ZONE_CANDIDATES=("asia-northeast3-a" "asia-northeast3-b" "asia-northeast3-c")

          IP_LIST=""
          for INSTANCE in $INSTANCE_NAMES; do
            for TRY_ZONE in "${ZONE_CANDIDATES[@]}"; do
              IP=$(gcloud compute instances describe "$INSTANCE" --zone "$TRY_ZONE" \
                --format="get(networkInterfaces[0].networkIP)" 2>/dev/null) || continue
              if [ -n "$IP" ]; then
                echo "‚úÖ $INSTANCE ($TRY_ZONE) ‚Üí $IP"
                IP_LIST+="$IP,"
                break
              fi
            done
          done

          IP_LIST="${IP_LIST%,}"

          echo " All IPs: $IP_LIST"
          echo "slot_ips=$IP_LIST" >> $GITHUB_OUTPUT

      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh

          echo "${{ secrets.JUMP_SSH_KEY }}" > ~/.ssh/jump_key
          chmod 600 ~/.ssh/jump_key

          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/dev_key
          chmod 600 ~/.ssh/dev_key

      - name: Rollback Backend with MIG Health Check
        env:
          SLOT_IPS: ${{ steps.get_ips.outputs.slot_ips }}
          RAW_CANCEL_VERSION: ${{ github.event.inputs.be_version }}
          JUMP_HOST: ${{ secrets.JUMP_SSH_HOST }}
        run: |
          CANCEL_VERSION="v$RAW_CANCEL_VERSION"
          mkdir -p ~/.ssh
          ssh-keyscan -H "$JUMP_HOST" >> ~/.ssh/known_hosts
          echo "üì¶ SLOT_IPS Í∞í: $SLOT_IPS"
          IFS=',' read -ra IPS <<< "$SLOT_IPS"
          echo "üîç Î∂ÑÌï¥Îêú IP Î∞∞Ïó¥: ${IPS[@]}"
          echo "üîç Î∞∞Ïó¥ Í∏∏Ïù¥: ${#IPS[@]}"

          for IP in "${IPS[@]}"; do
            # ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts || echo "‚ö†Ô∏è ssh-keyscan Ïã§Ìå®: $IP"
            echo "üöÄ Deploying to $IP..."
            ssh -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                -o ProxyCommand="ssh -i ~/.ssh/jump_key -W %h:%p ubuntu@$JUMP_HOST" -i ~/.ssh/dev_key ubuntu@$IP \

                CANCEL_VERSION=$CANCEL_VERSION bash -s <<'EOF'
                set -ex


                SLOTS_RUNNING=$(sudo docker ps --format '{{.Names}}' | grep '^onthetop-backend-' | wc -l)
                INSTANCE_NAME=$(hostname)

                if [ "$SLOTS_RUNNING" -ne 2 ]; then
                echo "‚ùå Error: '$INSTANCE_NAME' Ïù∏Ïä§ÌÑ¥Ïä§ÏóêÏÑú Ïã§Ìñâ Ï§ëÏù∏ ÎèÑÏª§Í∞Ä Ï†ïÌôïÌûà 2Í∞úÍ∞Ä ÏïÑÎãôÎãàÎã§. (ÌòÑÏû¨: $SLOTS_RUNNINGÍ∞ú)"
                sudo docker ps --format '  ‚Üí {{.Names}}  ({{.Status}})' | grep '^  ‚Üí onthetop-backend-'
                exit 1
                fi


                BLUE_CONTAINER="onthetop-backend-blue"
                GREEN_CONTAINER="onthetop-backend-green"

                BLUE_VERSION=$(sudo docker inspect --format='{{index .Config.Image}}' "$BLUE_CONTAINER" 2>/dev/null | cut -d: -f2 || echo "")
                GREEN_VERSION=$(sudo docker inspect --format='{{index .Config.Image}}' "$GREEN_CONTAINER" 2>/dev/null | cut -d: -f2 || echo "")

                ACTIVE_PORT=$(grep "proxy_pass" /etc/nginx/sites-enabled/backend | grep -oE '[0-9]+')
                if [ "$ACTIVE_PORT" = "8080" ]; then
                    ACTIVE_SLOT=blue
                    OLD_SLOT=green
                    OLD_PORT=8081
                else
                    ACTIVE_SLOT=green
                    OLD_SLOT=blue
                    OLD_PORT=8080
                fi

                # üîê ÌòÑÏû¨ NginxÍ∞Ä Î∞îÎùºÎ≥¥Îäî Ïä¨Î°ØÏùò Î≤ÑÏ†ÑÏù¥ CANCEL_VERSIONÍ≥º ÏùºÏπòÌïòÎäîÏßÄ ÌôïÏù∏
                ACTIVE_VERSION=$(sudo docker inspect --format='{{index .Config.Image}}' onthetop-backend-$ACTIVE_SLOT 2>/dev/null | cut -d: -f2 || echo "")
                if [ "$ACTIVE_VERSION" != "$CANCEL_VERSION" ]; then
                  echo "‚ùå ÌòÑÏû¨ NginxÍ∞Ä Î∞îÎùºÎ≥¥Îäî Ïä¨Î°Ø($ACTIVE_SLOT)Ïùò Î≤ÑÏ†ÑÏùÄ $ACTIVE_VERSION ÏûÖÎãàÎã§."
                  echo "‚ö†Ô∏è ÏûÖÎ†•Ìïú CANCEL_VERSION ($CANCEL_VERSION)Í≥º ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§. Î°§Î∞± Ï§ëÎã®."
                  exit 1
                fi


                OLD_VERSION=$(sudo docker inspect --format='{{index .Config.Image}}' onthetop-backend-$OLD_SLOT 2>/dev/null | cut -d: -f2 || echo "")
                if [ "$OLD_VERSION" = "$CANCEL_VERSION" ]; then
                  echo "‚ùå Î°§Î∞± ÎåÄÏÉÅ Ïä¨Î°ØÏù¥ Î¨∏Ï†ú Î≤ÑÏ†Ñ($CANCEL_VERSION)Í≥º ÎèôÏùºÌï©ÎãàÎã§. Î°§Î∞± Î∂àÍ∞Ä."
                  exit 1
                fi

                echo " ÌòÑÏû¨ Ïä¨Î°Ø: $ACTIVE_SLOT ‚Üí Î°§Î∞± Ïä¨Î°Ø: $OLD_SLOT (Ìè¨Ìä∏: $OLD_PORT)"

                # ‚úÖ Health check
                STATUS="000"
                for i in {1..10}; do
                  echo " [$i/10] Checking health on port $OLD_PORT..."
                  STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$OLD_PORT/api/v1/health || echo "000")
                  if [ "$STATUS" = "200" ]; then
                    echo "‚úÖ Health check passed!"
                    break
                  fi
                  sleep 10
                done

                if [ "$STATUS" != "200" ]; then
                  echo "‚ùå Health check failed after 10 attempts."
                  exit 1
                fi

                # üîÅ Nginx ÏÑ§Ï†ï Î≥ÄÍ≤Ω
                echo "üîÅ Switching Nginx to $OLD_SLOT (port $OLD_PORT)..."
                NGINX_CONF="/etc/nginx/sites-enabled/backend"

                echo "server {
                  listen 80;
                  server_name _;
                  location / {
                    proxy_pass http://localhost:$OLD_PORT;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  }
                }" | sudo tee "$NGINX_CONF" > /dev/null

                echo "‚úÖ Nginx config updated to route to port $OLD_PORT"
                echo "üîÑ Reloading Nginx..."
                sudo nginx -t
                sudo systemctl reload nginx

                ROLLBACK_LOG="/var/log/rollback.log"
                TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')


                echo "[$TIMESTAMP] [$INSTANCE_NAME] Î°§Î∞± Í≤∞Í≥º" | sudo tee -a $ROLLBACK_LOG > /dev/null
                echo "  üîµ BLUE Î≤ÑÏ†Ñ  : $BLUE_VERSION" | sudo tee -a $ROLLBACK_LOG > /dev/null
                echo "  üü¢ GREEN Î≤ÑÏ†Ñ : $GREEN_VERSION" | sudo tee -a $ROLLBACK_LOG > /dev/null
                echo "  üéØ ACTIVE SLOT: $ACTIVE_SLOT (Î≤ÑÏ†Ñ: $ACTIVE_VERSION)" | sudo tee -a $ROLLBACK_LOG > /dev/null
                echo "  üîÅ ROLLBACK ‚Üí  $OLD_SLOT (Î≤ÑÏ†Ñ: $OLD_VERSION, Ìè¨Ìä∏: $OLD_PORT)" | sudo tee -a $ROLLBACK_LOG > /dev/null
                echo "  ‚úÖ Health Check: ÌÜµÍ≥º" | sudo tee -a $ROLLBACK_LOG > /dev/null
                echo "" | sudo tee -a $ROLLBACK_LOG > /dev/null
          EOF
          done

      - name: Rollback CloudFront FE Origin
        run: |
          SLOT="${{ github.event.inputs.fe_slot }}"
          if [[ "$SLOT" == "blue" ]]; then
            TARGET="green"
          else
            TARGET="blue"
          fi

          echo "üîÑ FE Ïä¨Î°ØÏùÑ $TARGET ÏúºÎ°ú ÎêòÎèåÎ¶ΩÎãàÎã§."
          aws cloudfront get-distribution-config --id "$CLOUDFRONT_DISTRIBUTION_ID" > raw.json

          ETAG=$(jq -r '.ETag' raw.json)
          jq '.DistributionConfig' raw.json > config-only.json

          jq --arg TARGET "$TARGET" \
            '.Origins.Items[0].OriginPath = "/frontend/prod/\($TARGET)"' \
            config-only.json > updated-config.json

          aws cloudfront update-distribution \
            --id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --if-match "$ETAG" \
            --distribution-config file://updated-config.json

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --paths "/" "/index.html" "/assets/*.js" "/assets/*.css"
