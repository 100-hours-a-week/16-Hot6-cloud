name: Deploy Prod

on:
  workflow_dispatch:
    inputs:
      be_version:
        description: '배포할 BE 버전 (예: 1.2.3)'
        required: true
      be_slot:
        description: 'BE 슬롯 선택 (예: blue, green)'
        required: true
        default: 'green'
      fe_version:
        description: '배포할 FE 버전 (예: 1.2.3)'
        required: true
      fe_slot:
        description: 'FE 슬롯 선택 (예: blue, green)'
        required: true
        default: 'green'

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFRONT_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFRONT_SECRET_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-2
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      REGION: asia-northeast3
      ZONE: asia-northeast3-a

    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set variables
        id: vars
        run: |
          BE_VERSION="${{ github.event.inputs.be_version }}"
          BE_SLOT="${{ github.event.inputs.be_slot }}"
          FE_VERSION="${{ github.event.inputs.fe_version }}"
          FE_SLOT="${{ github.event.inputs.fe_slot }}"
          REGION="${{ env.REGION }}"
          ZONE="${{ env.ZONE }}"
      
          TEMPLATE_NAME="onthetop-backend-${BE_SLOT}-v${BE_VERSION//./-}"
          MIG_NAME="onthetop-backend-${BE_SLOT}"
      
          echo "be_version=$BE_VERSION" >> $GITHUB_OUTPUT
          echo "be_slot=$BE_SLOT" >> $GITHUB_OUTPUT
          echo "fe_version=$FE_VERSION" >> $GITHUB_OUTPUT
          echo "fe_slot=$FE_SLOT" >> $GITHUB_OUTPUT
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "zone=$ZONE" >> $GITHUB_OUTPUT
          echo "template_name=$TEMPLATE_NAME" >> $GITHUB_OUTPUT
          echo "mig_name=$MIG_NAME" >> $GITHUB_OUTPUT

      # ------------------ FE 업로드 ------------------

      - name: Download FE artifact from GitHub Release
        run: |
          curl -L -o fe.zip https://github.com/${{ github.repository }}/releases/download/v${{ steps.vars.outputs.fe_version }}/frontend-prod-build.zip
          unzip -o fe.zip -d fe-dist

      - name: Upload FE to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          AWS_DEFAULT_REGION: ap-northeast-2
        run: |
          aws s3 sync fe-dist/ s3://onthe-top/frontend/prod/${{ steps.vars.outputs.fe_slot }} --delete

      # ------------------ BE 배포 ------------------

      - name: Clean up existing template/MIG if exists
        run: |
          TEMPLATE=${{ steps.vars.outputs.template_name }}
          MIG=${{ steps.vars.outputs.mig_name }}
          ZONE=${{ steps.vars.outputs.zone }}

          echo "🔍 Checking if MIG exists..."
          gcloud compute instance-groups managed describe $MIG --zone=$ZONE >/dev/null 2>&1 && \
            gcloud compute instance-groups managed delete $MIG --zone=$ZONE --quiet || echo "✅ MIG not found. Skipping delete."

          echo "🔍 Checking if instance template exists..."
          gcloud compute instance-templates describe $TEMPLATE >/dev/null 2>&1 && \
            gcloud compute instance-templates delete $TEMPLATE --quiet || echo "✅ Template not found. Skipping delete."

      - name: (Optional) Ensure Health Check Exists
        run: |
          gcloud compute health-checks describe http-health-check >/dev/null 2>&1 || \
          gcloud compute health-checks create http http-health-check \
            --port 8080 \
            --request-path=/api/v1/health \
            --check-interval=30s \
            --timeout=10s \
            --unhealthy-threshold=3 \
            --healthy-threshold=2

      - name: Create Instance Template
        run: |
          gcloud compute instance-templates create ${{ steps.vars.outputs.template_name }} \
            --machine-type=e2-small \
            --region=${{ steps.vars.outputs.region }} \
            --network-interface=subnet=onthetop-subnet-prod-private-server-a,no-address \
            --image=projects/ubuntu-os-cloud/global/images/ubuntu-minimal-2404-noble-amd64-v20250514 \
            --boot-disk-size=20GB \
            --service-account=213622576886-compute@developer.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --tags=http-server,https-server,onthetop-monitoring-target,onthetop-server \
            --metadata=startup-version=${{ steps.vars.outputs.be_version }} \
            --metadata-from-file=startup-script=scripts/cicd/startup-script.sh

      - name: Create Managed Instance Group (MIG)
        run: |
          gcloud compute instance-groups managed create ${{ steps.vars.outputs.mig_name }} \
            --base-instance-name=${{ steps.vars.outputs.mig_name }} \
            --size=1 \
            --template=${{ steps.vars.outputs.template_name }} \
            --zone=${{ steps.vars.outputs.zone }} \
            --health-check=http-health-check \
            --initial-delay=180

      - name: Set Named Port for MIG
        run: |
          MIG=${{ steps.vars.outputs.mig_name }}
          ZONE=${{ steps.vars.outputs.zone }}

          gcloud compute instance-groups managed set-named-ports $MIG \
            --zone=$ZONE \
            --named-ports=http:8080

      - name: Wait for all MIG instances to become HEALTHY
        run: |
          MIG=${{ steps.vars.outputs.mig_name }}
          ZONE=${{ steps.vars.outputs.zone }}

          echo "⏳ Waiting for all instances in $MIG to become HEALTHY..."

          for i in {1..30}; do
            UNHEALTHY_COUNT=$(gcloud compute instance-groups managed list-instances $MIG \
              --zone=$ZONE \
              --format=json | jq '[.[] | select((.instanceHealth[0].detailedHealthState // "") != "HEALTHY")] | length')

            echo "Attempt $i: Unhealthy instance count = $UNHEALTHY_COUNT"

            if [ "$UNHEALTHY_COUNT" -eq 0 ]; then
              echo "✅ All instances are HEALTHY!"
              exit 0
            fi

            sleep 15
          done

          echo "❌ Some instances did not become healthy in time"
          exit 1

      - name: Add MIG to Backend Service
        run: |
          MIG=${{ steps.vars.outputs.mig_name }}
          ZONE=${{ steps.vars.outputs.zone }}
          BACKEND_SERVICE="onthetop-backend-service"

          echo "🔄 Replacing backend in $BACKEND_SERVICE with $MIG..."

          # 새 MIG 추가
          gcloud compute backend-services add-backend $BACKEND_SERVICE \
            --global \
            --instance-group=$MIG \
            --instance-group-zone=$ZONE

          MIG_URL="https://www.googleapis.com/compute/v1/projects/onthetop-457202/zones/$ZONE/instanceGroups/$MIG"

          echo "⏳ Waiting for LB to report $MIG as HEALTHY..."

          for i in {1..20}; do
            STATE=$(gcloud compute backend-services get-health $BACKEND_SERVICE --global --format=json |
              jq -r --arg MIG "$MIG_URL" '
                .[] | select(.backend == $MIG) |
                .status.healthStatus[0].healthState // "UNKNOWN"
              ' | tr -d '[:space:]')

            echo "Attempt $i: $MIG LB health = '$STATE'"

            if [ "$STATE" = "HEALTHY" ]; then
              echo "✅ LB sees $MIG as healthy!"
              break
            fi

            sleep 15
          done

          if [ "$STATE" != "HEALTHY" ]; then
            echo "❌ LB never saw $MIG as healthy in time. Rolling back..."
            gcloud compute backend-services remove-backend $BACKEND_SERVICE \
              --global \
              --instance-group=$MIG \
              --instance-group-zone=$ZONE || true
            exit 1
          fi

          # 🔁 기존 MIG 제거
          echo "🧹 Removing old MIG from $BACKEND_SERVICE..."
          if [[ "$MIG" == *"blue" ]]; then
            OLD_MIG="onthetop-backend-green"
          else
            OLD_MIG="onthetop-backend-blue"
          fi

          gcloud compute backend-services remove-backend $BACKEND_SERVICE \
            --global \
            --instance-group=$OLD_MIG \
            --instance-group-zone=$ZONE || true

      # ------------------ CloudFront Origin 변경 및 무효화 ------------------

      - name: Update CloudFront Origin to FE slot
        run: |
          SLOT="${{ steps.vars.outputs.fe_slot }}"

          aws cloudfront get-distribution-config --id $CLOUDFRONT_DISTRIBUTION_ID > config.json
          ETAG=$(jq -r '.ETag' config.json)
          jq --arg SLOT "$SLOT" '
            .DistributionConfig.Origins.Items[0].OriginPath = "/frontend/prod/\($SLOT)"
          ' config.json > updated-config.json

          aws cloudfront update-distribution \
            --id $CLOUDFRONT_DISTRIBUTION_ID \
            --if-match $ETAG \
            --distribution-config file://updated-config.json

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --paths "/frontend/prod/${{ steps.vars.outputs.fe_slot }}/*"
